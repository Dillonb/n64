#include <cpu/dynarec/asm_emitter.h>
#include <cpu/dynarec/dynarec.h>
#include <cpu/dynarec/dynarec_memory_management.h>
#include <cpu/r4300i.h>

#include <dynasm/dasm_proto.h>
#include <dynasm/dasm_x86.h>
#include <sys/mman.h>

#include <mem/n64bus.h>
#include "mips_instructions.h"
#include "disassemble.h"
#include "tlb_instructions.h"

//#define N64_LOG_JIT_SYNC_POINTS
//#define N64_LOG_COMPILATIONS

||#if ((defined(_M_X64) || defined(__amd64__)) != X64) || (defined(_WIN32) != WIN)
#error "Wrong DynASM flags used: pass `-D X64` and/or `-D WIN` to dynasm.lua as appropriate"
#endif

static_assert(sizeof(bool) == 1, "sizeof(bool) is expected to be 1!");

|.if X64
|.arch x64
|.else
|.arch x86
|.endif

|.if X64
  |.define cpuState, r12
  |.define instrArg, r13
  |.if WIN
    |.define rArg1, rcx
    |.define rArg2, rdx
  |.else
    |.define rArg1, rdi
    |.define rArg2, rsi
  |.endif
  |.macro prepcall1, arg1
    | mov rArg1, arg1
  |.endmacro
  |.macro prepcall2, arg1, arg2
    | mov rArg1, arg1
    | mov rArg2, arg2
  |.endmacro
  |.define postcall, .nop
    // Called before our block
    |.macro prologue
      // Push callee-saved registers onto the stack so we don't trample them
      | push cpuState
      | push instrArg
      // The CPU's state is passed in as argument 1
      | mov cpuState, rArg1
    |.endmacro
    // Called at the end of our block
    |.macro epilogue
      // Pop callee-saved registers off the stack and then return
      | pop instrArg
      | pop cpuState
      | ret
    |.endmacro
|.endif // TODO x86 version? ARM version?
|.type cpu_state, r4300i_t, cpuState

INLINE void run_handler(dasm_State** Dst, mips_instruction_t instr, word address, uintptr_t handler) {
    | prepcall2 cpuState, instr
    // x86_64 cannot call a 64 bit immediate, put it into rax first
    | mov64 rax, handler
    | call rax
    | postcall 2
}

INLINE void take_branch(dasm_State** Dst, mips_instruction_t instr, word address) {
    shalf offset = instr.i.immediate;
    sword soffset = offset;
    soffset <<= 2;
    | mov rax, cpu_state->pc
    | add rax, soffset
    | mov cpu_state->next_pc, rax
    | mov al, 1
    | mov cpu_state->branch, al
}

void check_exception(dasm_State** Dst, word block_length) {
    // If an exception was triggered, end the block.
    // otherwise, don't end the block.
    | mov al, cpu_state->exception
    // if (cpu_state->exception) {
    | cmp al, 0
    | je >1

    // cpu_state->exception = false
    | mov al, 0
    | mov cpu_state->exception, al

    // return block_length
    | mov eax, block_length
    | epilogue
    // }
    |1:
}


#define TAKEBRANCH take_branch(Dst, instr, address)
#define RUNHANDLER(handler) run_handler(Dst, instr, address, (uintptr_t)(handler))
#define IR_INFO(instruction, category_, format_, exception) dynarec_ir_t ir_##instruction = { .compiler = compile_##instruction, .category = category_, .format = format_, .exception_possible = exception}
#define COMP(name, type, exception) COMPILER(name) { RUNHANDLER(name); } IR_INFO(name, type, CALL_INTERPRETER, exception)
#define BAILZERO(v) do { if ((v) == 0) { return; } } while (0)
#define CALL_COMPILER(compiler) compiler(Dst, instr, address, aregs, dreg, extra_cycles)
#define CASEIR(pattern, instruction) case pattern: return &ir_##instruction

COMPILER(mips_nop) {}
IR_INFO(mips_nop, NORMAL, FORMAT_NOP, false);
COMPILER(mips_cache) {}
IR_INFO(mips_cache, NORMAL, FORMAT_NOP, false);

COMPILER(mips_addi) {
    BAILZERO(instr.i.rt);
    shalf imm = instr.i.immediate;
    sdword ext_imm = imm;
    // This is actually a load-immediate
    if (instr.i.rs == 0) {
        | mov64 Rq(dreg), ext_imm
    } else {
        | mov Rq(dreg), Rq(aregs[0])
        | add Rq(dreg), ext_imm
        | movsxd Rq(dreg), Rd(dreg)
    }
}
IR_INFO(mips_addi, NORMAL, I_TYPE, false);

COMPILER(mips_addiu) {
    CALL_COMPILER(compile_mips_addi);
}
IR_INFO(mips_addiu, NORMAL, I_TYPE, false);

COMPILER(mips_beq) {
    // Compile as an unconditional branch
    if (instr.i.rs == 0 && instr.i.rt == 0) {
        // This is a branch-to-self, make it take extra cycles
        if (instr.i.immediate == 0xFFFF) {
            *extra_cycles = 63; // for a total of 64
        }
        TAKEBRANCH;
    } else {
        // handle normally
        RUNHANDLER(mips_beq);
   }
}
IR_INFO(mips_beq, BRANCH, CALL_INTERPRETER, false);

COMPILER(mips_daddi) {
    BAILZERO(instr.i.rt);
    shalf imm = instr.i.immediate;
    sdword ext_imm = imm;
    // This is actually a load-immediate
    if (instr.i.rs == 0) {
        | mov64 Rq(dreg), ext_imm
    } else {
        | mov Rq(dreg), Rq(aregs[0])
        | add Rq(dreg), ext_imm
    }
}
IR_INFO(mips_daddi, NORMAL, I_TYPE, false);

COMPILER(mips_daddiu) {
    return CALL_COMPILER(compile_mips_daddi);
}
IR_INFO(mips_daddiu, NORMAL, I_TYPE, false);

COMPILER(mips_andi) {
    BAILZERO(instr.i.rt);
    | mov Rq(dreg), Rq(aregs[0])
    | and Rq(dreg), instr.i.immediate
}
IR_INFO(mips_andi, NORMAL, I_TYPE, false);

COMPILER(mips_ori) {
    BAILZERO(instr.i.rt);
    | mov Rq(dreg), Rq(aregs[0])
    | or Rq(dreg), instr.i.immediate
}
IR_INFO(mips_ori, NORMAL, I_TYPE, false);

COMPILER(mips_slti) {
    shalf imm = instr.i.immediate;
    sdword ext_imm = imm;
    BAILZERO(instr.i.rt);

    | cmp Rq(aregs[0]), ext_imm
    | setl al // sets al to 1 if rs < imm (signed), 0 if not
    | movzx Rq(dreg), al // al operations don't extend to rax, so we do it manually.
}
IR_INFO(mips_slti, NORMAL, I_TYPE, false);

COMPILER(mips_sltiu) {
    shalf imm = instr.i.immediate;
    sdword ext_imm = imm;
    BAILZERO(instr.i.rt);
    | cmp Rq(aregs[0]), ext_imm
    | setb al // sets al to 1 if rs < imm (unsigned), 0 if not
    | movzx Rq(dreg), al // al operations don't extend to rax, so we do it manually.
}
IR_INFO(mips_sltiu, NORMAL, I_TYPE, false);

COMPILER(mips_xori) {
    BAILZERO(instr.i.rt);
    | mov Rq(dreg), Rq(aregs[0])
    | xor Rq(dreg), instr.i.immediate
}
IR_INFO(mips_xori, NORMAL, I_TYPE, false);

COMPILER(mips_spc_sll) {
    BAILZERO(instr.r.rd);
    | mov Rq(dreg), Rq(aregs[0])
    | shl Rd(dreg), instr.r.sa
    | movsxd Rq(dreg), Rd(dreg)
}
IR_INFO(mips_spc_sll, NORMAL, SHIFT_CONST, false);

COMPILER(mips_spc_srl) {
    BAILZERO(instr.r.rd);
    | mov Rq(dreg), Rq(aregs[0])
    | shr Rd(dreg), instr.r.sa
    | movsxd Rq(dreg), Rd(dreg)
}
IR_INFO(mips_spc_srl, NORMAL, SHIFT_CONST, false);

COMPILER(mips_spc_sra) {
    BAILZERO(instr.r.rd);
    | mov Rq(dreg), Rq(aregs[0])
    | sar Rd(dreg), instr.r.sa
    | movsxd Rq(dreg), Rd(dreg)
}
IR_INFO(mips_spc_sra, NORMAL, SHIFT_CONST, false);

COMPILER(mips_spc_srav) {
    BAILZERO(instr.r.rd);
    | mov Rq(dreg), Rq(aregs[0])
    | mov rcx, Rq(aregs[1])
    | sar Rd(dreg), cl
    | movsxd Rq(dreg), Rd(dreg)
}
IR_INFO(mips_spc_srav, NORMAL, R_TYPE, false);

COMPILER(mips_spc_sllv) {
    BAILZERO(instr.r.rd);
    | mov Rq(dreg), Rq(aregs[0])
    | mov rcx, Rq(aregs[1])
    | shl Rd(dreg), cl
    | movsxd Rq(dreg), Rd(dreg)
}
IR_INFO(mips_spc_sllv, NORMAL, R_TYPE, false);

COMPILER(mips_spc_srlv) {
    BAILZERO(instr.r.rd);
    | mov Rq(dreg), Rq(aregs[0])
    | mov rcx, Rq(aregs[1])
    | shr Rd(dreg), cl
    | movsxd Rq(dreg), Rd(dreg)
}
IR_INFO(mips_spc_srlv, NORMAL, R_TYPE, false);

COMPILER(mips_spc_mfhi) {
    BAILZERO(instr.r.rd);
    uintptr_t src = (uintptr_t) &global_system->cpu.mult_hi;
    | mov64 rax, [src]
    | mov Rq(dreg), rax
}
IR_INFO(mips_spc_mfhi, NORMAL, MF_MULTREG, false);

COMPILER(mips_spc_mthi) {
    uintptr_t dst = (uintptr_t) &global_system->cpu.mult_hi;
    | mov rax, Rq(aregs[0])
    | mov64 [dst], rax
}
IR_INFO(mips_spc_mthi, NORMAL, MT_MULTREG, false);

COMPILER(mips_spc_mflo) {
    BAILZERO(instr.r.rd);
    uintptr_t src = (uintptr_t) &global_system->cpu.mult_lo;
    | mov64 rax, [src]
    | mov Rq(dreg), rax
}
IR_INFO(mips_spc_mflo, NORMAL, MF_MULTREG, false);

COMPILER(mips_spc_mtlo) {
    uintptr_t dst = (uintptr_t) &global_system->cpu.mult_lo;
    | mov rax, Rq(aregs[0])
    | mov64 [dst], rax
}
IR_INFO(mips_spc_mtlo, NORMAL, MT_MULTREG, false);

COMPILER(mips_spc_dsllv) {
    BAILZERO(instr.r.rd);
    | mov Rq(dreg), Rq(aregs[0])
    | mov rcx, Rq(aregs[1])
    | shl Rq(dreg), cl
}
IR_INFO(mips_spc_dsllv, NORMAL, R_TYPE, false);

COMPILER(mips_spc_dsrlv) {
    BAILZERO(instr.r.rd);
    | mov Rq(dreg), Rq(aregs[0])
    | mov rcx, Rq(aregs[1])
    | shr Rq(dreg), cl
}
IR_INFO(mips_spc_dsrlv, NORMAL, R_TYPE, false);

COMP(mips_spc_mult, NORMAL, false);
COMP(mips_spc_multu, NORMAL, false);
COMP(mips_spc_div, NORMAL, false);
COMP(mips_spc_divu, NORMAL, false);
COMP(mips_spc_dmult, NORMAL, false);
COMP(mips_spc_dmultu, NORMAL, false);
COMP(mips_spc_ddiv, NORMAL, false);
COMP(mips_spc_ddivu, NORMAL, false);

COMPILER(mips_spc_add) {
    BAILZERO(instr.r.rd);
    | mov rax, Rq(aregs[0])
    | mov Rq(dreg), Rq(aregs[1])
    | add Rq(dreg), rax
    | movsxd Rq(dreg), Rd(dreg)
}
IR_INFO(mips_spc_add, NORMAL, R_TYPE, false);

COMPILER(mips_spc_addu) {
    CALL_COMPILER(compile_mips_spc_add);
}
IR_INFO(mips_spc_addu, NORMAL, R_TYPE, false);

COMPILER(mips_spc_and) {
    BAILZERO(instr.r.rd);
    | mov rax, Rq(aregs[0])
    | mov Rq(dreg), Rq(aregs[1])
    | and Rq(dreg), rax
    | movsxd Rq(dreg), Rd(dreg)
}
IR_INFO(mips_spc_and, NORMAL, R_TYPE, false);

COMPILER(mips_spc_nor) {
    BAILZERO(instr.r.rd);
    | mov rax, Rq(aregs[0])
    | mov Rq(dreg), Rq(aregs[1])
    | or Rq(dreg), rax
    | not Rq(dreg)
    | movsxd Rq(dreg), Rd(dreg)
}
IR_INFO(mips_spc_nor, NORMAL, R_TYPE, false);

COMP(mips_spc_sub, NORMAL, false);
COMP(mips_spc_subu, NORMAL, false);

COMPILER(mips_spc_or) {
    BAILZERO(instr.r.rd);
    | mov rax, Rq(aregs[0])
    | mov Rq(dreg), Rq(aregs[1])
    | or Rq(dreg), rax
    | movsxd Rq(dreg), Rd(dreg)
}
IR_INFO(mips_spc_or, NORMAL, R_TYPE, false);

COMPILER(mips_spc_xor) {
    BAILZERO(instr.r.rd);
    | mov rax, Rq(aregs[0])
    | mov Rq(dreg), Rq(aregs[1])
    | xor Rq(dreg), rax
    | movsxd Rq(dreg), Rd(dreg)
}
IR_INFO(mips_spc_xor, NORMAL, R_TYPE, false);

COMP(mips_spc_slt, NORMAL, false);
COMP(mips_spc_sltu, NORMAL, false);

COMPILER(mips_spc_dadd) {
    BAILZERO(instr.r.rd);
    | mov rax, Rq(aregs[0])
    | mov Rq(dreg), Rq(aregs[1])
    | add Rq(dreg), rax
}
IR_INFO(mips_spc_dadd, NORMAL, R_TYPE, false);

COMPILER(mips_spc_daddu) {
    CALL_COMPILER(compile_mips_spc_dadd);
}
IR_INFO(mips_spc_daddu, NORMAL, R_TYPE, false);

COMP(mips_spc_dsubu, NORMAL, false);
COMP(mips_spc_teq, NORMAL, true);

COMPILER(mips_spc_dsll) {
    BAILZERO(instr.r.rd);
    | mov Rq(dreg), Rq(aregs[0])
    | shl Rd(dreg), instr.r.sa
}
IR_INFO(mips_spc_dsll, NORMAL, SHIFT_CONST, false);

COMPILER(mips_spc_dsrl) {
    BAILZERO(instr.r.rd);
    | mov Rq(dreg), Rq(aregs[0])
    | shr Rd(dreg), instr.r.sa
}
IR_INFO(mips_spc_dsrl, NORMAL, SHIFT_CONST, false);

COMPILER(mips_spc_dsra) {
    BAILZERO(instr.r.rd);
    | mov Rq(dreg), Rq(aregs[0])
    | sar Rd(dreg), instr.r.sa
}
IR_INFO(mips_spc_dsra, NORMAL, SHIFT_CONST, false);

COMP(mips_spc_dsll32, NORMAL, false);
COMP(mips_spc_dsrl32, NORMAL, false);
COMP(mips_spc_dsra32, NORMAL, false);

// Load-stores
COMP(mips_lbu, NORMAL, false);
COMP(mips_lhu, NORMAL, false);
COMP(mips_lh, NORMAL, false);
COMP(mips_lw, NORMAL, false);
COMP(mips_lwu, NORMAL, false);
COMP(mips_sb, STORE, false);
COMP(mips_sh, STORE, false);
COMP(mips_sw, STORE, false);
COMP(mips_sd, STORE, false);
COMP(mips_lb, NORMAL, false);
COMP(mips_lui, NORMAL, false);
COMP(mips_ld, NORMAL, false);
COMP(mips_ldc1, NORMAL, true);
COMP(mips_sdc1, STORE, true);
COMP(mips_lwc1, NORMAL, true);
COMP(mips_swc1, STORE, true);
COMP(mips_lwl, NORMAL, false);
COMP(mips_lwr, NORMAL, false);
COMP(mips_swl, STORE, false);
COMP(mips_swr, STORE, false);
COMP(mips_ldl, NORMAL, false);
COMP(mips_ldr, NORMAL, false);
COMP(mips_sdl, STORE, false);
COMP(mips_sdr, STORE, false);

// Unoptimized branches
COMP(mips_beql, BRANCH_LIKELY, false);
COMP(mips_bgtz, BRANCH, false);
COMP(mips_bgtzl, BRANCH_LIKELY, false);
COMP(mips_blez, BRANCH, false);
COMP(mips_blezl, BRANCH_LIKELY, false);
COMP(mips_bne, BRANCH, false);
COMP(mips_bnel, BRANCH_LIKELY, false);
COMP(mips_j, BRANCH, false);
COMP(mips_jal, BRANCH, false);
COMP(mips_ri_bltz, BRANCH, false);
COMP(mips_ri_bltzl, BRANCH_LIKELY, false);
COMP(mips_ri_bltzal, BRANCH, false);
COMP(mips_ri_bgez, BRANCH, false);
COMP(mips_ri_bgezl, BRANCH_LIKELY, false);
COMP(mips_ri_bgezal, BRANCH, false);
COMP(mips_spc_jr, BRANCH, false);
COMP(mips_spc_jalr, BRANCH, false);
COMP(mips_cp_bc1tl, BRANCH_LIKELY, false);
COMP(mips_cp_bc1fl, BRANCH_LIKELY, false);

// Instructions that don't make too much sense to optimize
COMP(mips_mfc0, NORMAL, false);
COMP(mips_mtc0, NORMAL, false);
COMP(mips_tlbwi, TLB_WRITE, false);
COMP(mips_tlbp, NORMAL, false);
COMP(mips_tlbr, NORMAL, false);
COMP(mips_eret, ERET, false);


// CP1 stuff
COMP(mips_cfc1, NORMAL, true);
COMP(mips_mfc1, NORMAL, true);
COMP(mips_dmfc1, NORMAL, true);
COMP(mips_mtc1, NORMAL, true);
COMP(mips_dmtc1, NORMAL, true);
COMP(mips_ctc1, NORMAL, true);
COMP(mips_cp_bc1t, BRANCH, true);
COMP(mips_cp_bc1f, BRANCH, true);
COMP(mips_cp_add_d, NORMAL, true);
COMP(mips_cp_add_s, NORMAL, true);
COMP(mips_cp_sub_d, NORMAL, true);
COMP(mips_cp_sub_s, NORMAL, true);
COMP(mips_cp_mul_d, NORMAL, true);
COMP(mips_cp_mul_s, NORMAL, true);
COMP(mips_cp_div_d, NORMAL, true);
COMP(mips_cp_div_s, NORMAL, true);
COMP(mips_cp_trunc_l_d, NORMAL, true);
COMP(mips_cp_trunc_l_s, NORMAL, true);
COMP(mips_cp_trunc_w_d, NORMAL, true);
COMP(mips_cp_trunc_w_s, NORMAL, true);
COMP(mips_cp_cvt_d_s, NORMAL, true);
COMP(mips_cp_cvt_d_w, NORMAL, true);
COMP(mips_cp_cvt_d_l, NORMAL, true);
COMP(mips_cp_cvt_l_d, NORMAL, true);
COMP(mips_cp_cvt_l_s, NORMAL, true);
COMP(mips_cp_cvt_s_d, NORMAL, true);
COMP(mips_cp_cvt_s_w, NORMAL, true);
COMP(mips_cp_cvt_s_l, NORMAL, true);
COMP(mips_cp_cvt_w_d, NORMAL, true);
COMP(mips_cp_cvt_w_s, NORMAL, true);
COMP(mips_cp_sqrt_d, NORMAL, true);
COMP(mips_cp_sqrt_s, NORMAL, true);
COMP(mips_cp_abs_d, NORMAL, true);
COMP(mips_cp_abs_s, NORMAL, true);
COMP(mips_cp_mov_d, NORMAL, true);
COMP(mips_cp_mov_s, NORMAL, true);
COMP(mips_cp_neg_d, NORMAL, true);
COMP(mips_cp_neg_s, NORMAL, true);
COMP(mips_cp_c_eq_d, NORMAL, true);
COMP(mips_cp_c_eq_s, NORMAL, true);
COMP(mips_cp_c_lt_d, NORMAL, true);
COMP(mips_cp_c_lt_s, NORMAL, true);
COMP(mips_cp_c_le_d, NORMAL, true);
COMP(mips_cp_c_le_s, NORMAL, true);

INLINE dynarec_ir_t* cp0_instruction_ir(mips_instruction_t instr, word address) {
    if (instr.last11 == 0) {
        switch (instr.r.rs) {
            CASEIR(COP_MF, mips_mfc0);
            // Last 11 bits are 0
            CASEIR(COP_MT, mips_mtc0);
            default: {
                char buf[50];
                disassemble(address, instr.raw, buf, 50);
                logfatal("other/unknown MIPS CP0 0x%08X with rs: %d%d%d%d%d [%s]", instr.raw,
                         instr.rs0, instr.rs1, instr.rs2, instr.rs3, instr.rs4, buf);
            }
        }
    } else {
        switch (instr.fr.funct) {
            CASEIR(COP_FUNCT_TLBWI_MULT, mips_tlbwi);
            CASEIR(COP_FUNCT_TLBP,       mips_tlbp);
            CASEIR(COP_FUNCT_TLBR_SUB,   mips_tlbr);
            CASEIR(COP_FUNCT_ERET,       mips_eret);
            default: {
                char buf[50];
                disassemble(address, instr.raw, buf, 50);
                logfatal("other/unknown MIPS CP0 0x%08X with FUNCT: %d%d%d%d%d%d [%s]", instr.raw,
                         instr.funct0, instr.funct1, instr.funct2, instr.funct3, instr.funct4, instr.funct5, buf);
            }
        }
    }
}

INLINE dynarec_ir_t* special_instruction_ir(mips_instruction_t instr, word address) {
    switch (instr.r.funct) {
        CASEIR(FUNCT_SLL, mips_spc_sll);
        CASEIR(FUNCT_SRL, mips_spc_srl);
        CASEIR(FUNCT_SRA, mips_spc_sra);
        CASEIR(FUNCT_SRAV, mips_spc_srav);
        CASEIR(FUNCT_SLLV, mips_spc_sllv);
        CASEIR(FUNCT_SRLV, mips_spc_srlv);
        CASEIR(FUNCT_JR, mips_spc_jr);
        CASEIR(FUNCT_JALR, mips_spc_jalr);
        CASEIR(FUNCT_MFHI, mips_spc_mfhi);
        CASEIR(FUNCT_MTHI, mips_spc_mthi);
        CASEIR(FUNCT_MFLO, mips_spc_mflo);
        CASEIR(FUNCT_MTLO, mips_spc_mtlo);
        CASEIR(FUNCT_DSLLV, mips_spc_dsllv);
        CASEIR(FUNCT_DSRLV, mips_spc_dsrlv);
        CASEIR(FUNCT_MULT, mips_spc_mult);
        CASEIR(FUNCT_MULTU, mips_spc_multu);
        CASEIR(FUNCT_DIV, mips_spc_div);
        CASEIR(FUNCT_DIVU, mips_spc_divu);
        CASEIR(FUNCT_DMULT, mips_spc_dmult);
        CASEIR(FUNCT_DMULTU, mips_spc_dmultu);
        CASEIR(FUNCT_DDIV, mips_spc_ddiv);
        CASEIR(FUNCT_DDIVU, mips_spc_ddivu);
        CASEIR(FUNCT_ADD, mips_spc_add);
        CASEIR(FUNCT_ADDU, mips_spc_addu);
        CASEIR(FUNCT_AND, mips_spc_and);
        CASEIR(FUNCT_NOR, mips_spc_nor);
        CASEIR(FUNCT_SUB, mips_spc_sub);
        CASEIR(FUNCT_SUBU, mips_spc_subu);
        CASEIR(FUNCT_OR, mips_spc_or);
        CASEIR(FUNCT_XOR, mips_spc_xor);
        CASEIR(FUNCT_SLT, mips_spc_slt);
        CASEIR(FUNCT_SLTU, mips_spc_sltu);
        CASEIR(FUNCT_DADD, mips_spc_dadd);
        CASEIR(FUNCT_DADDU, mips_spc_daddu);
        CASEIR(FUNCT_DSUBU, mips_spc_dsubu);
        CASEIR(FUNCT_TEQ, mips_spc_teq);
        CASEIR(FUNCT_DSLL, mips_spc_dsll);
        CASEIR(FUNCT_DSRL, mips_spc_dsrl);
        CASEIR(FUNCT_DSRA, mips_spc_dsra);
        CASEIR(FUNCT_DSLL32, mips_spc_dsll32);
        CASEIR(FUNCT_DSRL32, mips_spc_dsrl32);
        CASEIR(FUNCT_DSRA32, mips_spc_dsra32);
        default: {
            char buf[50];
            disassemble(address, instr.raw, buf, 50);
            logfatal("other/unknown MIPS Special 0x%08X with FUNCT: %d%d%d%d%d%d [%s]", instr.raw,
                     instr.funct0, instr.funct1, instr.funct2, instr.funct3, instr.funct4, instr.funct5, buf);
        }
    }
}


INLINE dynarec_ir_t* regimm_instruction_ir(mips_instruction_t instr, word address) {
    switch (instr.i.rt) {
        CASEIR(RT_BLTZ, mips_ri_bltz);
        CASEIR(RT_BLTZL, mips_ri_bltzl);
        CASEIR(RT_BLTZAL, mips_ri_bltzal);
        CASEIR(RT_BGEZ, mips_ri_bgez);
        CASEIR(RT_BGEZL, mips_ri_bgezl);
        CASEIR(RT_BGEZAL, mips_ri_bgezal);
        default: {
            char buf[50];
            disassemble(address, instr.raw, buf, 50);
            logfatal("other/unknown MIPS REGIMM 0x%08X with RT: %d%d%d%d%d [%s]", instr.raw,
                     instr.rt0, instr.rt1, instr.rt2, instr.rt3, instr.rt4, buf);
        }
    }
}

INLINE dynarec_ir_t* cp1_instruction_ir(mips_instruction_t instr, word address) {
    // This function uses a series of two switch statements.
    // If the instruction doesn't use the RS field for the opcode, then control will fall through to the next
    // switch, and check the FUNCT. It may be worth profiling and seeing if it's faster to check FUNCT first at some point
    switch (instr.r.rs) {
        CASEIR(COP_CF, mips_cfc1);
        CASEIR(COP_MF, mips_mfc1);
        CASEIR(COP_DMF, mips_dmfc1);
        CASEIR(COP_MT, mips_mtc1);
        CASEIR(COP_DMT, mips_dmtc1);
        CASEIR(COP_CT, mips_ctc1);
        case COP_BC:
            switch (instr.r.rt) {
                CASEIR(COP_BC_BCT, mips_cp_bc1t);
                CASEIR(COP_BC_BCF, mips_cp_bc1f);
                CASEIR(COP_BC_BCTL, mips_cp_bc1tl);
                CASEIR(COP_BC_BCFL, mips_cp_bc1fl);
                default: {
                    char buf[50];
                    disassemble(address, instr.raw, buf, 50);
                    logfatal("other/unknown MIPS BC 0x%08X [%s]", instr.raw, buf);
                }
            }
    }
    switch (instr.fr.funct) {
        case COP_FUNCT_ADD:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_add_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_add_s);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_TLBR_SUB: {
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_sub_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_sub_s);
                default:
                    logfatal("Undefined!");
            }
        }
        case COP_FUNCT_TLBWI_MULT:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_mul_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_mul_s);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_DIV:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_div_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_div_s);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_TRUNC_L:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_trunc_l_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_trunc_l_s);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_TRUNC_W:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_trunc_w_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_trunc_w_s);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_CVT_D:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_SINGLE, mips_cp_cvt_d_s);
                CASEIR(FP_FMT_W, mips_cp_cvt_d_w);
                CASEIR(FP_FMT_L, mips_cp_cvt_d_l);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_CVT_L:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_cvt_l_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_cvt_l_s);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_CVT_S:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_cvt_s_d);
                CASEIR(FP_FMT_W, mips_cp_cvt_s_w);
                CASEIR(FP_FMT_L, mips_cp_cvt_s_l);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_CVT_W:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_cvt_w_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_cvt_w_s);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_SQRT:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_sqrt_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_sqrt_s);
                default:
                    logfatal("Undefined!");
            }

        case COP_FUNCT_ABS:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_abs_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_abs_s);
                default:
                    logfatal("Undefined!");
            }

        case COP_FUNCT_MOV:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_mov_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_mov_s);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_NEG:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_neg_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_neg_s);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_C_F:
            logfatal("COP_FUNCT_C_F unimplemented");
        case COP_FUNCT_C_UN:
            logfatal("COP_FUNCT_C_UN unimplemented");
        case COP_FUNCT_C_EQ:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_c_eq_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_c_eq_s);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_C_UEQ:
            logfatal("COP_FUNCT_C_UEQ unimplemented");
        case COP_FUNCT_C_OLT:
            logfatal("COP_FUNCT_C_OLT unimplemented");
        case COP_FUNCT_C_ULT:
            logfatal("COP_FUNCT_C_ULT unimplemented");
        case COP_FUNCT_C_OLE:
            logfatal("COP_FUNCT_C_OLE unimplemented");
        case COP_FUNCT_C_ULE:
            logfatal("COP_FUNCT_C_ULE unimplemented");
        case COP_FUNCT_C_SF:
            logfatal("COP_FUNCT_C_SF unimplemented");
        case COP_FUNCT_C_NGLE:
            logfatal("COP_FUNCT_C_NGLE unimplemented");
        case COP_FUNCT_C_SEQ:
            logfatal("COP_FUNCT_C_SEQ unimplemented");
        case COP_FUNCT_C_NGL:
            logfatal("COP_FUNCT_C_NGL unimplemented");
        case COP_FUNCT_C_LT:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_c_lt_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_c_lt_s);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_C_NGE:
            logfatal("COP_FUNCT_C_NGE unimplemented");
        case COP_FUNCT_C_LE:
            switch (instr.fr.fmt) {
                CASEIR(FP_FMT_DOUBLE, mips_cp_c_le_d);
                CASEIR(FP_FMT_SINGLE, mips_cp_c_le_s);
                default:
                    logfatal("Undefined!");
            }
            logfatal("COP_FUNCT_C_LE unimplemented");
        case COP_FUNCT_C_NGT:
            logfatal("COP_FUNCT_C_NGT unimplemented");
    }

    char buf[50];
    disassemble(address, instr.raw, buf, 50);
    logfatal("other/unknown MIPS CP1 0x%08X with rs: %d%d%d%d%d and FUNCT: %d%d%d%d%d%d [%s]", instr.raw,
             instr.rs0, instr.rs1, instr.rs2, instr.rs3, instr.rs4,
             instr.funct0, instr.funct1, instr.funct2, instr.funct3, instr.funct4, instr.funct5, buf);
}

dynarec_ir_t* instruction_ir(mips_instruction_t instr, word address) {
    if (unlikely(instr.raw == 0)) {
        return &ir_mips_nop;
    }
    switch (instr.op) {
        case OPC_CP0:    return cp0_instruction_ir(instr, address);
        case OPC_CP1:    return cp1_instruction_ir(instr, address);
        case OPC_SPCL:   return special_instruction_ir(instr, address);
        case OPC_REGIMM: return regimm_instruction_ir(instr, address);

        CASEIR(OPC_LD, mips_ld);
        CASEIR(OPC_LUI, mips_lui);
        CASEIR(OPC_ADDIU, mips_addiu);
        CASEIR(OPC_ADDI, mips_addi);
        CASEIR(OPC_DADDI, mips_daddi);
        CASEIR(OPC_ANDI, mips_andi);
        CASEIR(OPC_LBU, mips_lbu);
        CASEIR(OPC_LHU, mips_lhu);
        CASEIR(OPC_LH, mips_lh);
        CASEIR(OPC_LW, mips_lw);
        CASEIR(OPC_LWU, mips_lwu);
        CASEIR(OPC_BEQ, mips_beq);
        CASEIR(OPC_BEQL, mips_beql);
        CASEIR(OPC_BGTZ, mips_bgtz);
        CASEIR(OPC_BGTZL, mips_bgtzl);
        CASEIR(OPC_BLEZ, mips_blez);
        CASEIR(OPC_BLEZL, mips_blezl);
        CASEIR(OPC_BNE, mips_bne);
        CASEIR(OPC_BNEL, mips_bnel);
        CASEIR(OPC_CACHE, mips_cache);
        CASEIR(OPC_SB, mips_sb);
        CASEIR(OPC_SH, mips_sh);
        CASEIR(OPC_SW, mips_sw);
        CASEIR(OPC_SD, mips_sd);
        CASEIR(OPC_ORI, mips_ori);
        CASEIR(OPC_J, mips_j);
        CASEIR(OPC_JAL, mips_jal);
        CASEIR(OPC_SLTI, mips_slti);
        CASEIR(OPC_SLTIU, mips_sltiu);
        CASEIR(OPC_XORI, mips_xori);
        CASEIR(OPC_DADDIU, mips_daddiu);
        CASEIR(OPC_LB, mips_lb);
        CASEIR(OPC_LDC1, mips_ldc1);
        CASEIR(OPC_SDC1, mips_sdc1);
        CASEIR(OPC_LWC1, mips_lwc1);
        CASEIR(OPC_SWC1, mips_swc1);
        CASEIR(OPC_LWL, mips_lwl);
        CASEIR(OPC_LWR, mips_lwr);
        CASEIR(OPC_SWL, mips_swl);
        CASEIR(OPC_SWR, mips_swr);
        CASEIR(OPC_LDL, mips_ldl);
        CASEIR(OPC_LDR, mips_ldr);
        CASEIR(OPC_SDL, mips_sdl);
        CASEIR(OPC_SDR, mips_sdr);
        default: {
            char buf[50];
            disassemble(address, instr.raw, buf, 50);
            logfatal("Failed to decode instruction 0x%08X opcode %d%d%d%d%d%d [%s]",
                     instr.raw, instr.op0, instr.op1, instr.op2, instr.op3, instr.op4, instr.op5, buf);
        }
    }
}

dasm_State* block_header() {
    dasm_State* d;
    unsigned npc = 8; // number of dynamic labels

    |.section code
    dasm_init(&d, DASM_MAXSECTION);

    |.globals lbl_

    void* labels[lbl__MAX];
    dasm_setupglobal(&d, labels, lbl__MAX);

    |.actionlist actions
    dasm_setup(&d, actions);
    dasm_growpc(&d, npc);

    dasm_State** Dst = &d;
    |.code
    |->compiled_block:
    | prologue
    return d;
}

void advance_pc(r4300i_t* compile_time_cpu, dasm_State** Dst) {
    static_assert(sizeof(compile_time_cpu->pc) == 8, "PC must be 64 bits for this to work (using RAX)");
    static_assert(sizeof(compile_time_cpu->next_pc) == 8, "Next PC must be 64 bits for this to work (using RAX)");

    // cpu->branch = false;
    | mov al, 0
    | mov cpu_state->branch, al

    // cpu->prev_pc = cpu->pc;
    | mov rax, cpu_state->pc
    | mov cpu_state->prev_pc, rax

    // cpu->pc = cpu->next_pc;
    | mov rax, cpu_state->next_pc
    | mov cpu_state->pc, rax

    // cpu->next_pc += 4;
    | add rax, 4
    | mov cpu_state->next_pc, rax
}

void clear_branch_flag(dasm_State** Dst) {
    // cpu->branch = false;
    | mov al, 0
    | mov cpu_state->branch, al
}

void end_block(dasm_State** Dst, int block_length) {
    clear_branch_flag(Dst);
    | mov eax, block_length
    | epilogue // return block_length
}

void post_branch_likely(dasm_State** Dst, r4300i_t* compile_time_cpu, int block_length) {
    | mov al, cpu_state->branch
    | cmp al, 0 // if (branch == true)
    | jne >1
    // If the branch WAS taken, end the block.
    end_block(Dst, block_length);
    | jmp >2
    |1:
    // If the branch WAS NOT taken, advance the PC.
    advance_pc(compile_time_cpu, Dst);
    |2:
}

void flush_prev_pc(dasm_State** Dst, dword prev_pc) {
    | mov rax, prev_pc
    | mov cpu_state->prev_pc, rax
}

void flush_pc(dasm_State** Dst, dword pc) {
    | mov rax, pc
    | mov cpu_state->pc, rax
}

void flush_next_pc(dasm_State** Dst, dword next_pc) {
    | mov rax, next_pc
    | mov cpu_state->next_pc, rax
}

void fill_valid_host_regs(int* valid_host_regs, int* num_valid_host_regs) {
    // TODO: support calling conventions and architectures other than System-V x86_64
    // rdi, rsi, rdx, rcx, r8, r9, r10, r11
    // save rax and rcx as work registers
    int available_host_regs[] = {2, 6, 7, 8, 9, 10, 11};
    int num_available_host_regs = 7;

    int used_host_regs = 0;
    for (; (used_host_regs < *num_valid_host_regs) && (used_host_regs < num_available_host_regs); used_host_regs++) {
        valid_host_regs[used_host_regs] = available_host_regs[used_host_regs];
    }

    *num_valid_host_regs = used_host_regs;
}

void load_host_register_from_gpr(dasm_State** Dst, r4300i_t* cpu, byte host_reg, int guest_reg) {
    uintptr_t src = (uintptr_t)&cpu->gpr[guest_reg];
    | mov64 rax, src
    | mov Rq(host_reg), [rax]
}

void flush_host_register_to_gpr(dasm_State** Dst, r4300i_t* cpu, int host_reg, int guest_reg) {
    if (guest_reg != 0) {
        uintptr_t dst = (uintptr_t)&cpu->gpr[guest_reg];
        | mov64 rax, dst
        | mov [rax], Rq(host_reg)
    }
}
