#include <cpu/dynarec.h>

#include <dynasm/dasm_proto.h>
#include <dynasm/dasm_x86.h>
#include <sys/mman.h>

#include <mem/n64bus.h>
#include "mips_instructions.h"
#include "disassemble.h"
#include "tlb_instructions.h"

||#if ((defined(_M_X64) || defined(__amd64__)) != X64) || (defined(_WIN32) != WIN)
#error "Wrong DynASM flags used: pass `-D X64` and/or `-D WIN` to dynasm.lua as appropriate"
#endif

static_assert(sizeof(bool) == 1, "sizeof(bool) is expected to be 1!");

|.if X64
|.arch x64
|.else
|.arch x86
|.endif

|.if X64
  |.define cpuState, r12
  |.define instrArg, r13
  |.if WIN
    |.define rArg1, rcx
    |.define rArg2, rdx
  |.else
    |.define rArg1, rdi
    |.define rArg2, rsi
  |.endif
  |.macro prepcall1, arg1
    | mov rArg1, arg1
  |.endmacro
  |.macro prepcall2, arg1, arg2
    | mov rArg1, arg1
    | mov rArg2, arg2
  |.endmacro
  |.define postcall, .nop
    // Called before our block
    |.macro prologue
      // Push callee-saved registers onto the stack so we don't trample them
      | push cpuState
      | push instrArg
      // The CPU's state is passed in as argument 1
      | mov cpuState, rArg1
    |.endmacro
    // Called at the end of our block
    |.macro epilogue
      // Pop callee-saved registers off the stack and then return
      | pop instrArg
      | pop cpuState
      | ret
    |.endmacro
|.endif // TODO x86 version? ARM version?
|.type cpu_state, r4300i_t, cpuState

void flush_code_cache(n64_dynarec_t* dynarec) {
    // Just set the pointer back to the beginning, no need to clear the actual data.
    dynarec->codecache_used = 0;

    // However, the block cache needs to be fully invalidated.
    for (int i = 0; i < BLOCKCACHE_OUTER_SIZE; i++) {
        dynarec->blockcache[i] = NULL;
    }
}

void* bumpalloc(n64_dynarec_t* dynarec, size_t size) {
    if (dynarec->codecache_used + size >= dynarec->codecache_size) {
        flush_code_cache(dynarec);
    }

    void* ptr = &dynarec->codecache[dynarec->codecache_used];

    dynarec->codecache_used += size;

#ifdef N64_LOG_COMPILATIONS
    printf("bumpalloc: %ld used of %ld\n", dynarec->codecache_used, dynarec->codecache_size);
#endif

    return ptr;
}

void* bumpalloc_zero(n64_dynarec_t* dynarec, size_t size) {
    byte* ptr = bumpalloc(dynarec, size);

    for (int i = 0; i < size; i++) {
        ptr[i] = 0;
    }

    return ptr;
}

void* link_and_encode(n64_dynarec_t* dynarec, dasm_State** d) {
    size_t code_size;
    dasm_link(d, &code_size);
#ifdef N64_LOG_COMPILATIONS
    printf("Generated %ld bytes of code\n", code_size);
#endif
    void* buf = bumpalloc(dynarec, code_size);
    dasm_encode(d, buf);

    return buf;
}

INLINE void run_handler(dasm_State** Dst, mips_instruction_t instr, word address, uintptr_t handler) {
    | prepcall2 cpuState, instr
    // x86_64 cannot call a 64 bit immediate, put it into rax first
    | mov64 rax, handler
    | call rax
    | postcall 2
}

#define RUNHANDLER(handler) run_handler(Dst, instr, address, (uintptr_t)(handler))
#define COMPILER(name) dynarec_instruction_category_t name(dasm_State** Dst, mips_instruction_t instr, word address)
#define COMP(name, type) COMPILER(compile_##name) { RUNHANDLER(name); return type; }

COMPILER(compile_mips_nop) {
#ifdef N64_LOG_COMPILATIONS
    printf("Compiling mips_nop\n");
#endif
    return NORMAL;
}

COMP(mips_addiu, NORMAL);

COMPILER(compile_mips_addi) {
#ifdef N64_LOG_COMPILATIONS
    printf("Compiling mips_addi\n");
#endif
    // This is actually a load-immediate
    if (instr.i.rs == 0) {
        uintptr_t dest = (uintptr_t) &global_system->cpu.gpr[instr.i.rt];
        shalf imm = instr.i.immediate;
        sdword ext_imm = imm;
        | mov rax, ext_imm
        | mov64 [dest], rax
    } else {
        RUNHANDLER(mips_addi);
    }
    return NORMAL;
}

COMPILER(compile_mips_beq) {
#ifdef N64_LOG_COMPILATIONS
    printf("Compiling mips_beq\n");
#endif
    // Compile as an unconditional branch
    if (instr.i.rs == 0 && instr.i.rt == 0) {
        // TODO macro this for other branch types
        shalf offset = instr.i.immediate;
        sword soffset = offset;
        soffset <<= 2;
        | mov eax, cpu_state->pc
        | add eax, soffset
        | mov cpu_state->next_pc, eax
        | mov al, 1
        | mov cpu_state->branch, al
    } else {
        // handle normally
        RUNHANDLER(mips_beq);
   }
   return BRANCH;
}

COMPILER(compile_mips_cache) {
#ifdef N64_LOG_COMPILATIONS
    printf("Compiling mips_cache\n");
#endif
    return NORMAL;
}

COMP(mips_daddi, NORMAL);
COMP(mips_andi, NORMAL);
COMP(mips_lbu, NORMAL);
COMP(mips_lhu, NORMAL);
COMP(mips_lh, NORMAL);
COMP(mips_lw, NORMAL);
COMP(mips_lwu, NORMAL);
COMP(mips_beql, BRANCH_LIKELY);
COMP(mips_bgtz, BRANCH);
COMP(mips_bgtzl, BRANCH_LIKELY);
COMP(mips_blez, BRANCH);
COMP(mips_blezl, BRANCH_LIKELY);
COMP(mips_bne, BRANCH);
COMP(mips_bnel, BRANCH_LIKELY);
COMP(mips_sb, STORE);
COMP(mips_sh, STORE);
COMP(mips_sw, STORE);
COMP(mips_sd, STORE);
COMP(mips_ori, NORMAL);
COMP(mips_j, BRANCH);
COMP(mips_jal, BRANCH);
COMP(mips_slti, NORMAL);
COMP(mips_sltiu, NORMAL);
COMP(mips_xori, NORMAL);
COMP(mips_daddiu, NORMAL);
COMP(mips_lb, NORMAL);
COMP(mips_lui, NORMAL);
COMP(mips_ld, NORMAL);
COMP(mips_ldc1, NORMAL);
COMP(mips_sdc1, STORE);
COMP(mips_lwc1, NORMAL);
COMP(mips_swc1, STORE);
COMP(mips_lwl, NORMAL);
COMP(mips_lwr, NORMAL);
COMP(mips_swl, STORE);
COMP(mips_swr, STORE);
COMP(mips_ldl, NORMAL);
COMP(mips_ldr, NORMAL);
COMP(mips_sdl, STORE);
COMP(mips_sdr, STORE);
COMP(mips_mfc0, NORMAL);
COMP(mips_mtc0, NORMAL);
COMP(mips_tlbwi, TLB_WRITE);
COMP(mips_tlbp, NORMAL);
COMP(mips_eret, ERET);
COMP(mips_spc_sll, NORMAL);
COMP(mips_spc_srl, NORMAL);
COMP(mips_spc_sra, NORMAL);
COMP(mips_spc_srav, NORMAL);
COMP(mips_spc_sllv, NORMAL);
COMP(mips_spc_srlv, NORMAL);
COMP(mips_spc_jr, BRANCH);
COMP(mips_spc_jalr, BRANCH);
COMP(mips_spc_mfhi, NORMAL);
COMP(mips_spc_mthi, NORMAL);
COMP(mips_spc_mflo, NORMAL);
COMP(mips_spc_mtlo, NORMAL);
COMP(mips_spc_dsllv, NORMAL);
COMP(mips_spc_dsrlv, NORMAL);
COMP(mips_spc_mult, NORMAL);
COMP(mips_spc_multu, NORMAL);
COMP(mips_spc_div, NORMAL);
COMP(mips_spc_divu, NORMAL);
COMP(mips_spc_dmultu, NORMAL);
COMP(mips_spc_ddiv, NORMAL);
COMP(mips_spc_ddivu, NORMAL);
COMP(mips_spc_add, NORMAL);
COMP(mips_spc_addu, NORMAL);
COMP(mips_spc_and, NORMAL);
COMP(mips_spc_nor, NORMAL);
COMP(mips_spc_sub, NORMAL);
COMP(mips_spc_subu, NORMAL);
COMP(mips_spc_or, NORMAL);
COMP(mips_spc_xor, NORMAL);
COMP(mips_spc_slt, NORMAL);
COMP(mips_spc_sltu, NORMAL);
COMP(mips_spc_dadd, NORMAL);
COMP(mips_spc_daddu, NORMAL);
COMP(mips_spc_dsubu, NORMAL);
COMP(mips_spc_dsll, NORMAL);
COMP(mips_spc_dsrl, NORMAL);
COMP(mips_spc_dsll32, NORMAL);
COMP(mips_spc_dsrl32, NORMAL);
COMP(mips_spc_dsra32, NORMAL);
COMP(mips_ri_bltz, BRANCH);
COMP(mips_ri_bltzl, BRANCH_LIKELY);
COMP(mips_ri_bgez, BRANCH);
COMP(mips_ri_bgezl, BRANCH_LIKELY);
COMP(mips_ri_bgezal, BRANCH);
COMP(mips_cfc1, NORMAL);
COMP(mips_mfc1, NORMAL);
COMP(mips_dmfc1, NORMAL);
COMP(mips_mtc1, NORMAL);
COMP(mips_dmtc1, NORMAL);
COMP(mips_ctc1, NORMAL);
COMP(mips_cp_bc1t, BRANCH);
COMP(mips_cp_bc1f, BRANCH);
COMP(mips_cp_bc1tl, BRANCH_LIKELY);
COMP(mips_cp_bc1fl, BRANCH_LIKELY);
COMP(mips_cp_add_d, NORMAL);
COMP(mips_cp_add_s, NORMAL);
COMP(mips_cp_sub_d, NORMAL);
COMP(mips_cp_sub_s, NORMAL);
COMP(mips_cp_mul_d, NORMAL);
COMP(mips_cp_mul_s, NORMAL);
COMP(mips_cp_div_d, NORMAL);
COMP(mips_cp_div_s, NORMAL);
COMP(mips_cp_trunc_l_d, NORMAL);
COMP(mips_cp_trunc_l_s, NORMAL);
COMP(mips_cp_trunc_w_d, NORMAL);
COMP(mips_cp_trunc_w_s, NORMAL);
COMP(mips_cp_cvt_d_s, NORMAL);
COMP(mips_cp_cvt_d_w, NORMAL);
COMP(mips_cp_cvt_d_l, NORMAL);
COMP(mips_cp_cvt_l_d, NORMAL);
COMP(mips_cp_cvt_l_s, NORMAL);
COMP(mips_cp_cvt_s_d, NORMAL);
COMP(mips_cp_cvt_s_w, NORMAL);
COMP(mips_cp_cvt_s_l, NORMAL);
COMP(mips_cp_cvt_w_d, NORMAL);
COMP(mips_cp_cvt_w_s, NORMAL);
COMP(mips_cp_sqrt_d, NORMAL);
COMP(mips_cp_sqrt_s, NORMAL);
COMP(mips_cp_abs_d, NORMAL);
COMP(mips_cp_abs_s, NORMAL);
COMP(mips_cp_mov_d, NORMAL);
COMP(mips_cp_mov_s, NORMAL);
COMP(mips_cp_neg_d, NORMAL);
COMP(mips_cp_neg_s, NORMAL);
COMP(mips_cp_c_eq_d, NORMAL);
COMP(mips_cp_c_eq_s, NORMAL);
COMP(mips_cp_c_lt_d, NORMAL);
COMP(mips_cp_c_lt_s, NORMAL);
COMP(mips_cp_c_le_d, NORMAL);
COMP(mips_cp_c_le_s, NORMAL);

dynarec_instruction_category_t compile_cp0_instruction(dasm_State** Dst, mips_instruction_t instr, word address) {
    if (instr.last11 == 0) {
        switch (instr.r.rs) {
            case COP_MF:
                return compile_mips_mfc0(Dst, instr, address);
            case COP_MT: // Last 11 bits are 0
                return compile_mips_mtc0(Dst, instr, address);
            default: {
                char buf[50];
                disassemble(address, instr.raw, buf, 50);
                logfatal("other/unknown MIPS CP0 0x%08X with rs: %d%d%d%d%d [%s]", instr.raw,
                         instr.rs0, instr.rs1, instr.rs2, instr.rs3, instr.rs4, buf);
            }
        }
    } else {
        switch (instr.fr.funct) {
            case COP_FUNCT_TLBWI_MULT:
                return compile_mips_tlbwi(Dst, instr, address);
            case COP_FUNCT_TLBP:
                return compile_mips_tlbp(Dst, instr, address);
            case COP_FUNCT_TLBR_SUB:
                logfatal("tlbr");
                //return compile_mips_tlbr(Dst, instr, address);
            case COP_FUNCT_ERET:
                return compile_mips_eret(Dst, instr, address);
            default: {
                char buf[50];
                disassemble(address, instr.raw, buf, 50);
                logfatal("other/unknown MIPS CP0 0x%08X with FUNCT: %d%d%d%d%d%d [%s]", instr.raw,
                         instr.funct0, instr.funct1, instr.funct2, instr.funct3, instr.funct4, instr.funct5, buf);
            }
        }
    }
}

INLINE dynarec_instruction_category_t compile_special_instruction(dasm_State** Dst, mips_instruction_t instr, word address) {
    switch (instr.r.funct) {
        case FUNCT_SLL:    return compile_mips_spc_sll(Dst, instr, address);
        case FUNCT_SRL:    return compile_mips_spc_srl(Dst, instr, address);
        case FUNCT_SRA:    return compile_mips_spc_sra(Dst, instr, address);
        case FUNCT_SRAV:   return compile_mips_spc_srav(Dst, instr, address);
        case FUNCT_SLLV:   return compile_mips_spc_sllv(Dst, instr, address);
        case FUNCT_SRLV:   return compile_mips_spc_srlv(Dst, instr, address);
        case FUNCT_JR:     return compile_mips_spc_jr(Dst, instr, address);
        case FUNCT_JALR:   return compile_mips_spc_jalr(Dst, instr, address);
        case FUNCT_MFHI:   return compile_mips_spc_mfhi(Dst, instr, address);
        case FUNCT_MTHI:   return compile_mips_spc_mthi(Dst, instr, address);
        case FUNCT_MFLO:   return compile_mips_spc_mflo(Dst, instr, address);
        case FUNCT_MTLO:   return compile_mips_spc_mtlo(Dst, instr, address);
        case FUNCT_DSLLV:  return compile_mips_spc_dsllv(Dst, instr, address);
        case FUNCT_DSRLV:  return compile_mips_spc_dsrlv(Dst, instr, address);
        case FUNCT_MULT:   return compile_mips_spc_mult(Dst, instr, address);
        case FUNCT_MULTU:  return compile_mips_spc_multu(Dst, instr, address);
        case FUNCT_DIV:    return compile_mips_spc_div(Dst, instr, address);
        case FUNCT_DIVU:   return compile_mips_spc_divu(Dst, instr, address);
        case FUNCT_DMULTU: return compile_mips_spc_dmultu(Dst, instr, address);
        case FUNCT_DDIV:   return compile_mips_spc_ddiv(Dst, instr, address);
        case FUNCT_DDIVU:  return compile_mips_spc_ddivu(Dst, instr, address);
        case FUNCT_ADD:    return compile_mips_spc_add(Dst, instr, address);
        case FUNCT_ADDU:   return compile_mips_spc_addu(Dst, instr, address);
        case FUNCT_AND:    return compile_mips_spc_and(Dst, instr, address);
        case FUNCT_NOR:    return compile_mips_spc_nor(Dst, instr, address);
        case FUNCT_SUB:    return compile_mips_spc_sub(Dst, instr, address);
        case FUNCT_SUBU:   return compile_mips_spc_subu(Dst, instr, address);
        case FUNCT_OR:     return compile_mips_spc_or(Dst, instr, address);
        case FUNCT_XOR:    return compile_mips_spc_xor(Dst, instr, address);
        case FUNCT_SLT:    return compile_mips_spc_slt(Dst, instr, address);
        case FUNCT_SLTU:   return compile_mips_spc_sltu(Dst, instr, address);
        case FUNCT_DADD:   return compile_mips_spc_dadd(Dst, instr, address);
        case FUNCT_DADDU:  return compile_mips_spc_daddu(Dst, instr, address);
        case FUNCT_DSUBU:  return compile_mips_spc_dsubu(Dst, instr, address);
        case FUNCT_DSLL:   return compile_mips_spc_dsll(Dst, instr, address);
        case FUNCT_DSRL:   return compile_mips_spc_dsrl(Dst, instr, address);
        case FUNCT_DSLL32: return compile_mips_spc_dsll32(Dst, instr, address);
        case FUNCT_DSRL32: return compile_mips_spc_dsrl32(Dst, instr, address);
        case FUNCT_DSRA32: return compile_mips_spc_dsra32(Dst, instr, address);
        default: {
            char buf[50];
            disassemble(address, instr.raw, buf, 50);
            logfatal("other/unknown MIPS Special 0x%08X with FUNCT: %d%d%d%d%d%d [%s]", instr.raw,
                     instr.funct0, instr.funct1, instr.funct2, instr.funct3, instr.funct4, instr.funct5, buf);
        }
    }
}

INLINE dynarec_instruction_category_t compile_regimm_instruction(dasm_State** Dst, mips_instruction_t instr, word address) {
    switch (instr.i.rt) {
        case RT_BLTZ:   return compile_mips_ri_bltz(Dst, instr, address);
        case RT_BLTZL:  return compile_mips_ri_bltzl(Dst, instr, address);
        case RT_BGEZ:   return compile_mips_ri_bgez(Dst, instr, address);
        case RT_BGEZL:  return compile_mips_ri_bgezl(Dst, instr, address);
        case RT_BGEZAL: return compile_mips_ri_bgezal(Dst, instr, address);
        default: {
            char buf[50];
            disassemble(address, instr.raw, buf, 50);
            logfatal("other/unknown MIPS REGIMM 0x%08X with RT: %d%d%d%d%d [%s]", instr.raw,
                     instr.rt0, instr.rt1, instr.rt2, instr.rt3, instr.rt4, buf);
        }
    }
}

INLINE dynarec_instruction_category_t compile_cp1_instruction(dasm_State** Dst, mips_instruction_t instr, word address) {
    // This function uses a series of two switch statements.
    // If the instruction doesn't use the RS field for the opcode, then control will fall through to the next
    // switch, and check the FUNCT. It may be worth profiling and seeing if it's faster to check FUNCT first at some point
    switch (instr.r.rs) {
        case COP_CF:
            return compile_mips_cfc1(Dst, instr, address);
        case COP_MF:
            return compile_mips_mfc1(Dst, instr, address);
        case COP_DMF:
            return compile_mips_dmfc1(Dst, instr, address);
        case COP_MT:
            return compile_mips_mtc1(Dst, instr, address);
        case COP_DMT:
            return compile_mips_dmtc1(Dst, instr, address);
        case COP_CT:
            return compile_mips_ctc1(Dst, instr, address);
        case COP_BC:
            switch (instr.r.rt) {
                case COP_BC_BCT:
                    return compile_mips_cp_bc1t(Dst, instr, address);
                case COP_BC_BCF:
                    return compile_mips_cp_bc1f(Dst, instr, address);
                case COP_BC_BCTL:
                    return compile_mips_cp_bc1tl(Dst, instr, address);
                case COP_BC_BCFL:
                    return compile_mips_cp_bc1fl(Dst, instr, address);
                default: {
                    char buf[50];
                    disassemble(address, instr.raw, buf, 50);
                    logfatal("other/unknown MIPS BC 0x%08X [%s]", instr.raw, buf);
                }
            }
    }
    switch (instr.fr.funct) {
        case COP_FUNCT_ADD:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_add_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_add_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_TLBR_SUB: {
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_sub_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_sub_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
        }
        case COP_FUNCT_TLBWI_MULT:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_mul_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_mul_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_DIV:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_div_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_div_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_TRUNC_L:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_trunc_l_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_trunc_l_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_TRUNC_W:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_trunc_w_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_trunc_w_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_CVT_D:
            switch (instr.fr.fmt) {
                case FP_FMT_SINGLE:
                    return compile_mips_cp_cvt_d_s(Dst, instr, address);
                case FP_FMT_W:
                    return compile_mips_cp_cvt_d_w(Dst, instr, address);
                case FP_FMT_L:
                    return compile_mips_cp_cvt_d_l(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_CVT_L:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_cvt_l_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_cvt_l_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_CVT_S:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_cvt_s_d(Dst, instr, address);
                case FP_FMT_W:
                    return compile_mips_cp_cvt_s_w(Dst, instr, address);
                case FP_FMT_L:
                    return compile_mips_cp_cvt_s_l(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_CVT_W:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_cvt_w_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_cvt_w_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_SQRT:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_sqrt_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_sqrt_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }

        case COP_FUNCT_ABS:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_abs_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_abs_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }

        case COP_FUNCT_MOV:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_mov_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_mov_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_NEG:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_neg_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_neg_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_C_F:
            logfatal("COP_FUNCT_C_F unimplemented");
        case COP_FUNCT_C_UN:
            logfatal("COP_FUNCT_C_UN unimplemented");
        case COP_FUNCT_C_EQ:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_c_eq_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_c_eq_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_C_UEQ:
            logfatal("COP_FUNCT_C_UEQ unimplemented");
        case COP_FUNCT_C_OLT:
            logfatal("COP_FUNCT_C_OLT unimplemented");
        case COP_FUNCT_C_ULT:
            logfatal("COP_FUNCT_C_ULT unimplemented");
        case COP_FUNCT_C_OLE:
            logfatal("COP_FUNCT_C_OLE unimplemented");
        case COP_FUNCT_C_ULE:
            logfatal("COP_FUNCT_C_ULE unimplemented");
        case COP_FUNCT_C_SF:
            logfatal("COP_FUNCT_C_SF unimplemented");
        case COP_FUNCT_C_NGLE:
            logfatal("COP_FUNCT_C_NGLE unimplemented");
        case COP_FUNCT_C_SEQ:
            logfatal("COP_FUNCT_C_SEQ unimplemented");
        case COP_FUNCT_C_NGL:
            logfatal("COP_FUNCT_C_NGL unimplemented");
        case COP_FUNCT_C_LT:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_c_lt_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_c_lt_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
        case COP_FUNCT_C_NGE:
            logfatal("COP_FUNCT_C_NGE unimplemented");
        case COP_FUNCT_C_LE:
            switch (instr.fr.fmt) {
                case FP_FMT_DOUBLE:
                    return compile_mips_cp_c_le_d(Dst, instr, address);
                case FP_FMT_SINGLE:
                    return compile_mips_cp_c_le_s(Dst, instr, address);
                default:
                    logfatal("Undefined!");
            }
            logfatal("COP_FUNCT_C_LE unimplemented");
        case COP_FUNCT_C_NGT:
            logfatal("COP_FUNCT_C_NGT unimplemented");
    }

    char buf[50];
    disassemble(address, instr.raw, buf, 50);
    logfatal("other/unknown MIPS CP1 0x%08X with rs: %d%d%d%d%d and FUNCT: %d%d%d%d%d%d [%s]", instr.raw,
             instr.rs0, instr.rs1, instr.rs2, instr.rs3, instr.rs4,
             instr.funct0, instr.funct1, instr.funct2, instr.funct3, instr.funct4, instr.funct5, buf);
}

// returns true when the block should end
dynarec_instruction_category_t compile_instruction(dasm_State** Dst, mips_instruction_t instr, word address, word block_length) {
    if (unlikely(instr.raw == 0)) {
        return compile_mips_nop(Dst, instr, address);
    }
    switch (instr.op) {
        case OPC_CP0:    return compile_cp0_instruction(Dst, instr, address);
        case OPC_CP1: {
            dynarec_instruction_category_t category = compile_cp1_instruction(Dst, instr, address);
            // If an exception was triggered, end the block.
            // otherwise, don't end the block.
            | mov al, cpu_state->exception
            // if (cpu_state->exception) {
            | cmp al, 0
            | je >1

            // cpu_state->exception = false
            | mov al, 0
            | mov cpu_state->exception, al

            // return block_length
            | mov eax, block_length
            | epilogue
            // }
            |1:
            return category;
        }
        case OPC_SPCL:   return compile_special_instruction(Dst, instr, address);
        case OPC_REGIMM: return compile_regimm_instruction(Dst, instr, address);

        case OPC_LD:     return compile_mips_ld(Dst, instr, address);
        case OPC_LUI:    return compile_mips_lui(Dst, instr, address);
        case OPC_ADDIU:  return compile_mips_addiu(Dst, instr, address);
        case OPC_ADDI:   return compile_mips_addi(Dst, instr, address);
        case OPC_DADDI:  return compile_mips_daddi(Dst, instr, address);
        case OPC_ANDI:   return compile_mips_andi(Dst, instr, address);
        case OPC_LBU:    return compile_mips_lbu(Dst, instr, address);
        case OPC_LHU:    return compile_mips_lhu(Dst, instr, address);
        case OPC_LH:     return compile_mips_lh(Dst, instr, address);
        case OPC_LW:     return compile_mips_lw(Dst, instr, address);
        case OPC_LWU:    return compile_mips_lwu(Dst, instr, address);
        case OPC_BEQ:    return compile_mips_beq(Dst, instr, address);
        case OPC_BEQL:   return compile_mips_beql(Dst, instr, address);
        case OPC_BGTZ:   return compile_mips_bgtz(Dst, instr, address);
        case OPC_BGTZL:  return compile_mips_bgtzl(Dst, instr, address);
        case OPC_BLEZ:   return compile_mips_blez(Dst, instr, address);
        case OPC_BLEZL:  return compile_mips_blezl(Dst, instr, address);
        case OPC_BNE:    return compile_mips_bne(Dst, instr, address);
        case OPC_BNEL:   return compile_mips_bnel(Dst, instr, address);
        case OPC_CACHE:  return compile_mips_cache(Dst, instr, address);
        case OPC_SB:     return compile_mips_sb(Dst, instr, address);
        case OPC_SH:     return compile_mips_sh(Dst, instr, address);
        case OPC_SW:     return compile_mips_sw(Dst, instr, address);
        case OPC_SD:     return compile_mips_sd(Dst, instr, address);
        case OPC_ORI:    return compile_mips_ori(Dst, instr, address);
        case OPC_J:      return compile_mips_j(Dst, instr, address);
        case OPC_JAL:    return compile_mips_jal(Dst, instr, address);
        case OPC_SLTI:   return compile_mips_slti(Dst, instr, address);
        case OPC_SLTIU:  return compile_mips_sltiu(Dst, instr, address);
        case OPC_XORI:   return compile_mips_xori(Dst, instr, address);
        case OPC_DADDIU: return compile_mips_daddiu(Dst, instr, address);
        case OPC_LB:     return compile_mips_lb(Dst, instr, address);
        case OPC_LDC1:   return compile_mips_ldc1(Dst, instr, address);
        case OPC_SDC1:   return compile_mips_sdc1(Dst, instr, address);
        case OPC_LWC1:   return compile_mips_lwc1(Dst, instr, address);
        case OPC_SWC1:   return compile_mips_swc1(Dst, instr, address);
        case OPC_LWL:    return compile_mips_lwl(Dst, instr, address);
        case OPC_LWR:    return compile_mips_lwr(Dst, instr, address);
        case OPC_SWL:    return compile_mips_swl(Dst, instr, address);
        case OPC_SWR:    return compile_mips_swr(Dst, instr, address);
        case OPC_LDL:    return compile_mips_ldl(Dst, instr, address);
        case OPC_LDR:    return compile_mips_ldr(Dst, instr, address);
        case OPC_SDL:    return compile_mips_sdl(Dst, instr, address);
        case OPC_SDR:    return compile_mips_sdr(Dst, instr, address);
        default:
#ifdef LOG_ENABLED
        {
            char buf[50];
            if (n64_log_verbosity < LOG_VERBOSITY_DEBUG) {
                disassemble(address, instr.raw, buf, 50);
            }
            logfatal("Failed to decode instruction 0x%08X opcode %d%d%d%d%d%d [%s]",
                     instr.raw, instr.op0, instr.op1, instr.op2, instr.op3, instr.op4, instr.op5, buf);
        }
#else
            logfatal("Failed to decode instruction 0x%08X opcode %d%d%d%d%d%d]",
                     instr.raw, instr.op0, instr.op1, instr.op2, instr.op3, instr.op4, instr.op5);
#endif
    }
}

void pre_instruction(r4300i_t* cpu, word expected_address) {
    word actual_address = resolve_virtual_address(cpu->pc, &cpu->cp0);
#ifdef N64_LOG_COMPILATIONS
    printf("pc 0x%08X\n", cpu->pc);
#endif
    if (actual_address != expected_address) {
        logfatal("Executing at 0x%08X when we should be at 0x%08X!\n", actual_address, expected_address);
    }
    cpu->branch = false;
    cpu->prev_pc = cpu->pc;
    cpu->pc = cpu->next_pc;
    cpu->next_pc += 4;
}

INLINE void compile_new_block(n64_dynarec_t* dynarec, r4300i_t* compile_time_cpu, n64_dynarec_block_t* block, word virtual_address, word physical_address) {

    dasm_State* d;
    unsigned npc = 8; // number of dynamic labels

    |.section code
    dasm_init(&d, DASM_MAXSECTION);

    |.globals lbl_

    void* labels[lbl__MAX];
    dasm_setupglobal(&d, labels, lbl__MAX);

    |.actionlist actions
    dasm_setup(&d, actions);
    dasm_growpc(&d, npc);

    dasm_State** Dst = &d;

    bool should_continue_block = true;
    int block_length = 0;

    //uintptr_t pre_instruction_ptr = (uintptr_t)pre_instruction;

    int instructions_left_in_block = -1;

    dynarec_instruction_category_t prev_instr_category = NORMAL;

    |.code
    |->compiled_block:
    | prologue
    do {
        mips_instruction_t instr;
        instr.raw = n64_read_physical_word(physical_address);

        word next_physical_address = physical_address + 4;

        /* I'm keeping this around for debugging because pre_instruction() does the actual vs. expected pc check.
        | prepcall2 cpuState, physical_address
        // x86 cannot call a 64 bit immediate, put it into rax first
        | mov64 rax, pre_instruction_ptr
        | call rax
        | postcall 2
         */

        static_assert(sizeof(compile_time_cpu->pc) == 4, "PC must be 32 bits for this to work (using EAX)");
        static_assert(sizeof(compile_time_cpu->next_pc) == 4, "Next PC must be 32 bits for this to work (using EAX)");

        // cpu->branch = false;
        | mov al, 0
        | mov cpu_state->branch, al

        // cpu->prev_pc = cpu->pc;
        | mov eax, cpu_state->pc
        | mov cpu_state->prev_pc, eax

        // cpu->pc = cpu->next_pc;
        | mov eax, cpu_state->next_pc
        | mov cpu_state->pc, eax

        // cpu->next_pc += 4;
        | add eax, 4
        | mov cpu_state->next_pc, eax

        instructions_left_in_block--;
        bool instr_ends_block;

        block_length++; // Needs to happen before we compile since we use the incremented value inside the compiler
        dynarec_instruction_category_t category = compile_instruction(Dst, instr, physical_address, block_length);

        switch (category) {
            case NORMAL:
                instr_ends_block = instructions_left_in_block == 0;
                break; // the "instructions_left_in_block" check got
            case BRANCH:
                if (prev_instr_category == BRANCH || prev_instr_category == BRANCH_LIKELY) {
                    // Check if the previous branch was taken.

                    // If the last branch wasn't taken, we can treat this the same as if the previous instruction wasn't a branch
                    // just set the cpu->last_branch_taken to cpu->branch_taken and execute the next instruction.

                    // emit:
                    // if (!cpu->last_branch_taken) cpu->last_branch_taken = cpu->branch_taken;
                    logfatal("Branch in a branch delay slot");
                } else {
                    // If the last instruction wasn't a branch, no special behavior is needed. Just set up some state in case the next one is.
                    // emit:
                    // cpu->last_branch_taken = cpu->branch_taken;
                    //logfatal("unimp");
                }

                // If the previous instruction was a branch, exit the block early if

                // If the previous instruction was a branch LIKELY, exit the block early if the _previous branch_
                instr_ends_block = false;
                instructions_left_in_block = 1; // emit delay slot
                break;

            case BRANCH_LIKELY:
                // If the previous instruction was a branch:
                //
                if (prev_instr_category == BRANCH || prev_instr_category == BRANCH_LIKELY) {
                    logfatal("Branch in a branch likely delay slot");
                } else {
                    // If it wasn't taken, end the block.
                    // If it was taken, don't end the block, need to execute delay slot
                    | mov al, cpu_state->branch
                    | cmp al, 0 // if (branch == true)
                    | jne >1
                    | mov rax, block_length
                    | epilogue // return block_length
                    |1:
                }

                instr_ends_block = false;
                instructions_left_in_block = 1; // emit delay slot
                break;
            case ERET:
            case TLB_WRITE:
            case STORE:
                instr_ends_block = true;
                break;

            default:
                logfatal("Unknown dynarec instruction type");
        }

        bool page_boundary_ends_block = (next_physical_address & (BLOCKCACHE_PAGE_SIZE - 1)) == 0;
        // !!!!!!!!!!!!!!! WARNING !!!!!!!!!!!!!!!
        // If the first instruction in the new page is a delay slot, INCLUDE IT IN THE BLOCK ANYWAY.
        // This DOES BREAK a corner case!
        // If the game overwrites the delay slot but does not overwrite the branch or anything in the other page,
        // THIS BLOCK WILL NOT GET MARKED DIRTY.
        // I highly doubt any games do it, but THIS NEEDS TO GET FIXED AT SOME POINT
        // !!!!!!!!!!!!!!! WARNING !!!!!!!!!!!!!!!
        if (instructions_left_in_block == 1) { page_boundary_ends_block = false; } // FIXME, TODO, BAD, EVIL, etc

        if (instr_ends_block || page_boundary_ends_block) {
#ifdef N64_LOG_COMPILATIONS
            printf("Ending block. instr: %d pb: %d (0x%08X)\n", instr_ends_block, page_boundary_ends_block, next_physical_address);
#endif
            should_continue_block = false;
        }

        physical_address = next_physical_address;
        prev_instr_category = category;
    } while (should_continue_block);
    | mov eax, block_length
    | epilogue
    void* compiled = link_and_encode(dynarec, &d);
    dasm_free(&d);

    block->run = compiled;
}


int missing_block_handler(r4300i_t* cpu) {
    word physical = resolve_virtual_address(cpu->pc, &cpu->cp0);
    word outer_index = physical >> BLOCKCACHE_OUTER_SHIFT;
    // TODO: put the dynarec object inside the r4300i_t object to get rid of this need for global_system
    n64_dynarec_block_t* block_list = global_system->dynarec->blockcache[outer_index];
    word inner_index = (physical & (BLOCKCACHE_PAGE_SIZE - 1)) >> 2;

    n64_dynarec_block_t* block = &block_list[inner_index];

#ifdef N64_LOG_COMPILATIONS
    printf("Compilin' new block at 0x%08X / 0x%08X\n", global_system->cpu.pc, physical);
#endif

    compile_new_block(global_system->dynarec, cpu, block, cpu->pc, physical);

    return block->run(cpu);
}

int n64_dynarec_step(n64_system_t* system, n64_dynarec_t* dynarec) {
    word physical = resolve_virtual_address(system->cpu.pc, &system->cpu.cp0);
    word outer_index = physical >> BLOCKCACHE_OUTER_SHIFT;
    n64_dynarec_block_t* block_list = dynarec->blockcache[outer_index];
    word inner_index = (physical & (BLOCKCACHE_PAGE_SIZE - 1)) >> 2;

    if (unlikely(block_list == NULL)) {
#ifdef N64_LOG_COMPILATIONS
        printf("Need a new block list for page 0x%05X (address 0x%08X virtual 0x%08X)\n", outer_index, physical, system->cpu.pc);
#endif
        block_list = bumpalloc_zero(dynarec, BLOCKCACHE_INNER_SIZE * sizeof(n64_dynarec_block_t));
        for (int i = 0; i < BLOCKCACHE_INNER_SIZE; i++) {
            block_list[i].run = missing_block_handler;
        }
        dynarec->blockcache[outer_index] = block_list;
    }

    n64_dynarec_block_t* block = &block_list[inner_index];

#ifdef N64_LOG_BLOCK_RUNS
    static int total_blocks_run = 0;
    printf("Running block at 0x%08X (block run #%d)\n", system->cpu.pc, ++total_blocks_run);
#endif
    int taken = block->run(&system->cpu);
#ifdef N64_LOG_JIT_SYNC_POINTS
    printf("JITSYNC %d %08X ", taken, system->cpu.pc);
    for (int i = 0; i < 32; i++) {
        printf("%016lX", system->cpu.gpr[i]);
        if (i != 31) {
            printf(" ");
        }
    }
    printf("\n");
#endif
#ifdef N64_LOG_BLOCK_RUNS
    printf("Done running block - pc is now 0x%08X\n", system->cpu.pc);
#endif

    return taken * CYCLES_PER_INSTR;
}

n64_dynarec_t* n64_dynarec_init(n64_system_t* system, byte* codecache, size_t codecache_size) {
#ifdef N64_LOG_COMPILATIONS
    printf("Trying to malloc %ld bytes\n", sizeof(n64_dynarec_t));
#endif
    n64_dynarec_t* dynarec = calloc(1, sizeof(n64_dynarec_t));

    dynarec->codecache_size = codecache_size;
    dynarec->codecache_used = 0;

    for (int i = 0; i < BLOCKCACHE_OUTER_SIZE; i++) {
        dynarec->blockcache[i] = NULL;
    }

    dynarec->codecache = codecache;
    return dynarec;
}

void invalidate_dynarec_page(n64_dynarec_t* dynarec, word physical_address) {
    word outer_index = physical_address >> BLOCKCACHE_OUTER_SHIFT;
    dynarec->blockcache[outer_index] = NULL;
}
